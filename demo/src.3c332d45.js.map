{"version":3,"sources":["../src/base64url.ts","../src/schema-format.ts","../src/webauthn-schema.ts","../src/webauthn.ts","state.ts","index.ts"],"names":["base64urlToBuffer","baseurl64String","padding","slice","length","base64String","replace","str","atob","buffer","ArrayBuffer","byteView","Uint8Array","i","charCodeAt","bufferToBase64url","charCode","String","fromCharCode","btoa","copyValue","convertValue","convert","conversionFn","schema","input","Array","map","v","Object","output","key","schemaField","entries","required","Error","optional","publicKeyCredentialDescriptorSchema","type","copy","id","transports","extensionsSchema","appid","txAuthSimple","txAuthGeneric","contentType","content","authnSel","exts","uvi","loc","uvm","authenticatorBiometricPerfBounds","credentialCreationOptions","publicKey","rp","user","name","displayName","icon","challenge","pubKeyCredParams","timeout","excludeCredentials","authenticatorSelection","attestation","extensions","signal","publicKeyCredentialWithAttestation","rawId","response","clientDataJSON","attestationObject","credentialRequestOptions","mediation","rpId","allowCredentials","userVerification","publicKeyCredentialWithAssertion","authenticatorData","signature","userHandle","async","create","requestJSON","request","credential","navigator","credentials","responseJSON","clientExtensionResults","getClientExtensionResults","get","supported","window","PublicKeyCredential"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAEgBA,EAAkBC,GAAAA;AAEhC,QAAMC,CAAAA,GAAU,KAAKC,KAAL,CAAW,CAAX,EAAW,CAAI,IAAKF,CAAAA,CAAgBG,MAAhBH,GAAyB,CAAlC,IAAwC,CAAnD,CAAhB;AAAA,QACMI,CAAAA,GAAeJ,CAAAA,CAAgBK,OAAhBL,CAAwB,IAAxBA,EAA8B,GAA9BA,EAAmCK,OAAnCL,CAA2C,IAA3CA,EAAiD,GAAjDA,IAAwDC,CAD7E;AAAA,QAIMK,CAAAA,GAAMC,IAAAA,CAAKH,CAALG,CAJZ;AAAA,QAOMC,CAAAA,GAAS,IAAIC,WAAJ,CAAgBH,CAAAA,CAAIH,MAApB,CAPf;AAAA,QAQMO,CAAAA,GAAW,IAAIC,UAAJ,CAAeH,CAAf,CARjB;;AASA,OAAK,IAAII,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIN,CAAAA,CAAIH,MAAxB,EAAgCS,CAAAA,EAAhC,EACEF,CAAAA,CAASE,CAATF,CAAAA,GAAcJ,CAAAA,CAAIO,UAAJP,CAAeM,CAAfN,CAAdI;;AAEF,SAAOF,CAAP;AAAOA;;AAAAA,SAGOM,CAHPN,CAGyBA,CAHzBA,EAGyBA;AAEhC,QAAME,CAAAA,GAAW,IAAIC,UAAJ,CAAeH,CAAf,CAAjB;AACA,MAAIF,CAAAA,GAAM,EAAV;;AACA,OAAK,MAAMS,CAAX,IAAuBL,CAAvB,EACEJ,CAAAA,IAAOU,MAAAA,CAAOC,YAAPD,CAAoBD,CAApBC,CAAPV;;AASF,SALqBY,IAAAA,CAAKZ,CAALY,CAAAA,CAIgBb,OAJhBa,CAIwB,KAJxBA,EAI+B,GAJ/BA,EAIoCb,OAJpCa,CAI4C,KAJ5CA,EAImD,GAJnDA,EAIwDb,OAJxDa,CAIgE,IAJhEA,EAIsE,EAJtEA,CAKrB;ACzBK;;AAAA,MAAMC,CAAAA,GAAY,MAAlB;AAAA,MACMC,CAAAA,GAAe,SADrB;;AAGP,SAAgBC,CAAhB,CAAkCC,CAAlC,EAAiEC,CAAjE,EAAiFC,CAAjF,EAAiFA;AAC/E,MAAID,CAAAA,KAAWJ,CAAf,EACE,OAAOK,CAAP;AAEF,MAAID,CAAAA,KAAWH,CAAf,EACE,OAAOE,CAAAA,CAAaE,CAAbF,CAAP;AAEF,MAAIC,CAAAA,YAAkBE,KAAtB,EACE,OAAOD,CAAAA,CAAME,GAANF,CAAWG,CAAAA,IAAWN,CAAAA,CAAkBC,CAAlBD,EAAgCE,CAAAA,CAAO,CAAPA,CAAhCF,EAA2CM,CAA3CN,CAAtBG,CAAP;;AAEF,MAAID,CAAAA,YAAkBK,MAAtB,EAA8B;AAC5B,UAAMC,CAAAA,GAAc,EAApB;;AACA,SAAK,MAAA,CAAOC,CAAP,EAAYC,CAAZ,CAAL,IAAiCH,MAAAA,CAAOI,OAAPJ,CAAeL,CAAfK,CAAjC,EACE,IAAME,CAAAA,IAAON,CAAb,EASkB,QAAdA,CAAAA,CAAMM,CAANN,CAAc,GAIlBK,CAAAA,CAAOC,CAAPD,CAAAA,GAAcR,CAAAA,CAAkBC,CAAlBD,EAAgCU,CAAAA,CAAYR,MAA5CF,EAAoDG,CAAAA,CAAMM,CAANN,CAApDH,CAJI,GAChBQ,CAAAA,CAAOC,CAAPD,CAAAA,GAAc,IADE,CATlB,KACE,IAAIE,CAAAA,CAAYE,QAAhB,EACE,MAAM,IAAIC,KAAJ,CAAIA,gBAAsBJ,CAAAA,EAA1B,CAAN;;AAaN,WAAOD,CAAP;AAAOA;AAAAA;;AAAAA,SAIKI,CAJLJ,CAIcN,CAJdM,EAIcN;AACvB,SAAO;AACLU,IAAAA,QAAAA,EAAAA,CAAU,CADL;AAELV,IAAAA,MAAAA,EAAAA;AAFK,GAAP;AAEEA;;AAAAA,SAIYY,CAJZZ,CAIqBA,CAJrBA,EAIqBA;AACvB,SAAO;AACLU,IAAAA,QAAAA,EAAAA,CAAU,CADL;AAELV,IAAAA,MAAAA,EAAAA;AAFK,GAAP;AC/CF;;AAAA,MAAMa,CAAAA,GAA8C;AAClDC,EAAAA,IAAAA,EAAMJ,CAAAA,CAASK,CAATL,CAD4C;AAElDM,EAAAA,EAAAA,EAAIN,CAAAA,CAASZ,CAATY,CAF8C;AAGlDO,EAAAA,UAAAA,EAAYL,CAAAA,CAASG,CAATH;AAHsC,CAApD;AAAA,MAMMM,CAAAA,GAA2B;AAC/BC,EAAAA,KAAAA,EAAOP,CAAAA,CAASG,CAATH,CADwB;AAE/BQ,EAAAA,YAAAA,EAAcR,CAAAA,CAASG,CAATH,CAFiB;AAG/BS,EAAAA,aAAAA,EAAeT,CAAAA,CAAS;AACtBU,IAAAA,WAAAA,EAAaZ,CAAAA,CAASK,CAATL,CADS;AAEtBa,IAAAA,OAAAA,EAASb,CAAAA,CAASZ,CAATY;AAFa,GAATE,CAHgB;AAO/BY,EAAAA,QAAAA,EAAUZ,CAAAA,CAAS,CAACd,CAAD,CAATc,CAPqB;AAQ/Ba,EAAAA,IAAAA,EAAMb,CAAAA,CAASG,CAATH,CARyB;AAS/Bc,EAAAA,GAAAA,EAAKd,CAAAA,CAASG,CAATH,CAT0B;AAU/Be,EAAAA,GAAAA,EAAKf,CAAAA,CAASG,CAATH,CAV0B;AAW/BgB,EAAAA,GAAAA,EAAKhB,CAAAA,CAASG,CAATH,CAX0B;AAY/BiB,EAAAA,gCAAAA,EAAkCjB,CAAAA,CAASG,CAATH;AAZH,CANjC;AAAA,MAuBakB,CAAAA,GAAoC;AAC/CC,EAAAA,SAAAA,EAAWrB,CAAAA,CAAS;AAClBsB,IAAAA,EAAAA,EAAItB,CAAAA,CAASK,CAATL,CADc;AAElBuB,IAAAA,IAAAA,EAAMvB,CAAAA,CAAS;AACbM,MAAAA,EAAAA,EAAIN,CAAAA,CAASZ,CAATY,CADS;AAEbwB,MAAAA,IAAAA,EAAMxB,CAAAA,CAASK,CAATL,CAFO;AAGbyB,MAAAA,WAAAA,EAAazB,CAAAA,CAASK,CAATL,CAHA;AAIb0B,MAAAA,IAAAA,EAAMxB,CAAAA,CAASG,CAATH;AAJO,KAATF,CAFY;AASlB2B,IAAAA,SAAAA,EAAW3B,CAAAA,CAASZ,CAATY,CATO;AAUlB4B,IAAAA,gBAAAA,EAAkB5B,CAAAA,CAASK,CAATL,CAVA;AAYlB6B,IAAAA,OAAAA,EAAS3B,CAAAA,CAASG,CAATH,CAZS;AAalB4B,IAAAA,kBAAAA,EAAoB5B,CAAAA,CAAS,CAACC,CAAD,CAATD,CAbF;AAclB6B,IAAAA,sBAAAA,EAAwB7B,CAAAA,CAASG,CAATH,CAdN;AAelB8B,IAAAA,WAAAA,EAAa9B,CAAAA,CAASG,CAATH,CAfK;AAgBlB+B,IAAAA,UAAAA,EAAY/B,CAAAA,CAASM,CAATN;AAhBM,GAATF,CADoC;AAmB/CkC,EAAAA,MAAAA,EAAQhC,CAAAA,CAASG,CAATH;AAnBuC,CAvBjD;AAAA,MA+CaiC,CAAAA,GAA6C;AACxD/B,EAAAA,IAAAA,EAAMJ,CAAAA,CAASK,CAATL,CADkD;AAExDM,EAAAA,EAAAA,EAAIN,CAAAA,CAASK,CAATL,CAFoD;AAGxDoC,EAAAA,KAAAA,EAAOpC,CAAAA,CAASZ,CAATY,CAHiD;AAIxDqC,EAAAA,QAAAA,EAAUrC,CAAAA,CAAS;AACjBsC,IAAAA,cAAAA,EAAgBtC,CAAAA,CAASZ,CAATY,CADC;AAEjBuC,IAAAA,iBAAAA,EAAmBvC,CAAAA,CAASZ,CAATY;AAFF,GAATA;AAJ8C,CA/C1D;AAAA,MA2DawC,CAAAA,GAAmC;AAC9CC,EAAAA,SAAAA,EAAWvC,CAAAA,CAASG,CAATH,CADmC;AAE9CmB,EAAAA,SAAAA,EAAWrB,CAAAA,CAAS;AAClB2B,IAAAA,SAAAA,EAAW3B,CAAAA,CAASZ,CAATY,CADO;AAElB6B,IAAAA,OAAAA,EAAS3B,CAAAA,CAASG,CAATH,CAFS;AAGlBwC,IAAAA,IAAAA,EAAMxC,CAAAA,CAASG,CAATH,CAHY;AAIlByC,IAAAA,gBAAAA,EAAkBzC,CAAAA,CAAS,CAACC,CAAD,CAATD,CAJA;AAKlB0C,IAAAA,gBAAAA,EAAkB1C,CAAAA,CAASG,CAATH,CALA;AAMlB+B,IAAAA,UAAAA,EAAY/B,CAAAA,CAASM,CAATN;AANM,GAATF,CAFmC;AAU9CkC,EAAAA,MAAAA,EAAQhC,CAAAA,CAASG,CAATH;AAVsC,CA3DhD;AAAA,MA0Ea2C,CAAAA,GAA2C;AACtDzC,EAAAA,IAAAA,EAAMJ,CAAAA,CAASK,CAATL,CADgD;AAEtDM,EAAAA,EAAAA,EAAIN,CAAAA,CAASK,CAATL,CAFkD;AAGtDoC,EAAAA,KAAAA,EAAOpC,CAAAA,CAASZ,CAATY,CAH+C;AAItDqC,EAAAA,QAAAA,EAAUrC,CAAAA,CAAS;AACjBsC,IAAAA,cAAAA,EAAgBtC,CAAAA,CAASZ,CAATY,CADC;AAEjB8C,IAAAA,iBAAAA,EAAmB9C,CAAAA,CAASZ,CAATY,CAFF;AAGjB+C,IAAAA,SAAAA,EAAW/C,CAAAA,CAASZ,CAATY,CAHM;AAIjBgD,IAAAA,UAAAA,EAAYhD,CAAAA,CAASZ,CAATY;AAJK,GAATA;AAJ4C,CA1ExD;AAAA,MAsFaV,CAAAA,GAAkC;AAC7C8B,EAAAA,yBAAAA,EAAAA,CAD6C;AAE7Ce,EAAAA,kCAAAA,EAAAA,CAF6C;AAG7CK,EAAAA,wBAAAA,EAAAA,CAH6C;AAI7CK,EAAAA,gCAAAA,EAAAA;AAJ6C,CAtF/C;;;ACCOI,eAAeC,CAAfD,CAAsBE,CAAtBF,EAAsBE;AAC3B,QAAMC,CAAAA,GAAUhE,CAAAA,CAAQtB,CAARsB,EAA2BgC,CAA3BhC,EAAsD+D,CAAtD/D,CAAhB;AAAA,QACMiE,CAAAA,GAAAA,MAAoBC,SAAAA,CAAUC,WAAVD,CAAsBJ,MAAtBI,CAA6BF,CAA7BE,CAD1B;AAAA,QAEME,CAAAA,GAAepE,CAAAA,CAAQP,CAARO,EAA2B+C,CAA3B/C,EAA+DiE,CAA/DjE,CAFrB;AAIA,SADAoE,CAAAA,CAAaC,sBAAbD,GAAsCH,CAAAA,CAAWK,yBAAXL,EAAtCG,EACOA,CAAP;AAGKP;;AAAAA,eAAeU,CAAfV,CAAmBE,CAAnBF,EAAmBE;AACxB,QAAMC,CAAAA,GAAUhE,CAAAA,CAAQtB,CAARsB,EAA2BoD,CAA3BpD,EAAqD+D,CAArD/D,CAAhB;AAAA,QACMiD,CAAAA,GAAAA,MAAkBiB,SAAAA,CAAUC,WAAVD,CAAsBK,GAAtBL,CAA0BF,CAA1BE,CADxB;AAAA,QAEME,CAAAA,GAAepE,CAAAA,CAAQP,CAARO,EAA2ByD,CAA3BzD,EAA6DiD,CAA7DjD,CAFrB;AAIA,SADAoE,CAAAA,CAAaC,sBAAbD,GAAsCnB,CAAAA,CAASqB,yBAATrB,EAAtCmB,EACOA,CAAP;AAaF;;AAAA,SAAgBI,CAAhB,GAAgBA;AACd,SAAA,CAAA,EAAUN,SAAAA,CAAUC,WAAVD,IAAyBA,SAAAA,CAAUC,WAAVD,CAAsBJ,MAA/CI,IAAyDA,SAAAA,CAAUC,WAAVD,CAAsBK,GAA/EL,IAAsFO,MAAAA,CAAOC,mBAAvG,CAAA;AAAuGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BzG,SAAgB,gBAAhB,GAAgC;AAC9B,MAAM,aAAa,GAAG,IAAI,CAAC,KAAL,CAAW,YAAY,CAAC,4BAAb,IAA6C,IAAxD,CAAtB;AACA,SAAO,aAAP;AACD;;AAHD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAKA,SAAgB,gBAAhB,CAAiC,aAAjC,EAA0F,OAA1F,EAAiH;AAAvB,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,IAAA;AAAuB;;AAC/G,EAAA,YAAY,CAAC,4BAAb,GAA4C,IAAI,CAAC,SAAL,CAAe,aAAf,EAA8B,IAA9B,EAAoC,IAApC,CAA5C;AACA,EAAA,oBAAoB;AACrB;;AAHD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAKA,SAAgB,gBAAhB,CAAiC,YAAjC,EAAqF;AACnF,MAAM,aAAa,GAAG,gBAAgB,EAAtC;AACA,EAAA,aAAa,CAAC,IAAd,CAAmB,YAAnB;AACA,EAAA,gBAAgB,CAAC,aAAD,CAAhB;AACD;;AAJD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAMA,SAAS,gBAAT,GAAyB;AACvB,SAAO,QAAQ,CAAC,aAAT,CAAuB,gBAAvB,CAAP;AACD;;AAED,SAAgB,oBAAhB,GAAoC;AAClC,EAAA,gBAAgB,GAAG,KAAnB,GAA2B,IAAI,CAAC,SAAL,CAAe,gBAAgB,EAA/B,EAAmC,IAAnC,EAAyC,IAAzC,CAA3B;AACD;;AAFD,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAIA,SAAgB,UAAhB,CAA2B,QAA3B,EAA6C,EAA7C,EAAoE;AAClE,SAAO,YAAA;;;;;;AACL,YAAA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,EAAiC,WAAjC,GAA+C,EAA/C;AACA,YAAA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,EAAiC,WAAjC,GAA+C,GAA/C;;;;;;AAEE,mBAAA,CAAA;AAAA;AAAA,cAAM,EAAE,EAAR,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,YAAA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,EAAiC,WAAjC,GAA+C,IAA/C;;;;;;;AAEA,YAAA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,EAAiC,WAAjC,GAA+C,IAA/C;AACA,YAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACA,YAAA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,EAAiC,WAAjC,GAA+C,GAA/C;;;;;;;;;;;;AAEH,GAXD;AAYD;;AAbD,OAAA,CAAA,UAAA,GAAA,UAAA;;AAeA,SAAe,SAAf,GAAwB;iCAAI,SAAO,YAAA;;AACjC,MAAA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,EAAiC,WAAjC,GAA+C,EAA/C;AACA,MAAA,gBAAgB,GAAG,KAAnB,CAAyB,eAAzB,GAA2C,wBAA3C;;AACA,UAAI;AACF,QAAA,gBAAgB,CAAC,IAAI,CAAC,KAAL,CAAW,gBAAgB,GAAG,KAA9B,CAAD,EAAuC,KAAvC,CAAhB;AACA,QAAA,gBAAgB,GAAG,KAAnB,CAAyB,eAAzB,GAA2C,sBAA3C;AACD,OAHD,CAGE,OAAO,CAAP,EAAU;AACV,QAAA,gBAAgB,GAAG,KAAnB,CAAyB,eAAzB,GAA2C,sBAA3C;AACA,QAAA,OAAO,CAAC,KAAR,CAAc,CAAd;AACA,QAAA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,EAAiC,WAAjC,GAA+C,CAA/C;AACD;;;;;;;AACF;;AAED,MAAM,CAAC,gBAAP,CAAwB,MAAxB,EAAgC,YAAA;AAC9B,MAAI;AACF,IAAA,oBAAoB;AACpB,IAAA,gBAAgB,GAAG,gBAAnB,CAAoC,OAApC,EAA6C,SAA7C;AACA,IAAA,gBAAgB,GAAG,gBAAnB,CAAoC,QAApC,EAA8C,SAA9C;AACA,IAAA,gBAAgB,GAAG,gBAAnB,CAAoC,OAApC,EAA6C,SAA7C;AACD,GALD,CAKE,OAAO,CAAP,EAAU;AACV,IAAA,OAAO,CAAC,KAAR,CAAc,CAAd;AACD;AACF,CATD;;cCtDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAGA,SAAS,qBAAT,GAA8B;AAC5B,SAAO,OAAA,CAAA,gBAAA,GAAmB,GAAnB,CAAuB,UAAC,GAAD,EAAI;AAAK,WAAC;AACtC,MAAA,EAAE,EAAE,GAAG,CAAC,KAD8B;AAEtC,MAAA,IAAI,EAAE,GAAG,CAAC;AAF4B,KAAD;AAGrC,GAHK,CAAP;AAID;;AAED,SAAe,QAAf,GAAuB;iCAAI,SAAO,YAAA;;;;;;AAChC,UAAA,EAAA,GAAA,OAAA,CAAA,gBAAA;AAAiB,iBAAA,CAAA;AAAA;AAAA,YAAM,eAAA,CAAA,MAAA,CAAO;AAC5B,YAAA,SAAS,EAAE;AACT,cAAA,SAAS,EAAE,6CADF;AAET,cAAA,EAAE,EAAE;AAAE,gBAAA,IAAI,EAAE;AAAR,eAFK;AAGT,cAAA,IAAI,EAAE;AAAE,gBAAA,EAAE,EAAE,6CAAN;AAAqD,gBAAA,IAAI,EAAE,WAA3D;AAAwE,gBAAA,WAAW,EAAE;AAArF,eAHG;AAIT,cAAA,gBAAgB,EAAE,CAAC;AAAE,gBAAA,IAAI,EAAE,YAAR;AAAsB,gBAAA,GAAG,EAAE,CAAC;AAA5B,eAAD,CAJT;AAKT,cAAA,kBAAkB,EAAE,qBAAqB;AALhC;AADiB,WAAP,CAAN,CAAA;;;AAAjB,UAAA,EAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAiB,EAAA,CAAA,IAAA,EAAjB,CAAA;;;;;;;;AASD;;AAED,SAAe,YAAf,GAA2B;iCAAI,SAAO,YAAA;;;;AACpC,iBAAA,CAAA;AAAA;AAAA,YAAM,eAAA,CAAA,GAAA,CAAI;AACR,YAAA,SAAS,EAAE;AACT,cAAA,SAAS,EAAE,6CADF;AAET,cAAA,gBAAgB,EAAE,qBAAqB;AAF9B;AADH,WAAJ,CAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;;;;;;;AAMD;;AAED,SAAe,KAAf,GAAoB;iCAAI,SAAO,YAAA;;AAC7B,MAAA,OAAA,CAAA,gBAAA,CAAiB,EAAjB;;;;;;AACD;;AAED,SAAe,aAAf,GAA4B;;;AAC1B,MAAA,QAAQ,CAAC,aAAT,CAAuB,oBAAvB,EAA6C,WAA7C,GAA2D,GAA3D;AACA,MAAA,QAAQ,CAAC,aAAT,CAAuB,oBAAvB,EAA6C,WAA7C,GAA2D,eAAA,CAAA,SAAA,KAAc,IAAd,GAAqB,IAAhF;;;;;;AACD;;AAED,MAAM,CAAC,gBAAP,CAAwB,MAAxB,EAAgC,YAAA;AAC9B,MAAI;AACF,IAAA,QAAQ,CAAC,aAAT,CAAuB,WAAvB,EAAoC,gBAApC,CAAqD,OAArD,EAA8D,OAAA,CAAA,UAAA,CAAW,mBAAX,EAAgC,QAAhC,CAA9D;AACA,IAAA,QAAQ,CAAC,aAAT,CAAuB,eAAvB,EAAwC,gBAAxC,CAAyD,OAAzD,EAAkE,OAAA,CAAA,UAAA,CAAW,uBAAX,EAAoC,YAApC,CAAlE;AACA,IAAA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,EAAiC,gBAAjC,CAAkD,OAAlD,EAA2D,OAAA,CAAA,UAAA,CAAW,gBAAX,EAA6B,KAA7B,CAA3D;AACA,IAAA,QAAQ,CAAC,aAAT,CAAuB,YAAvB,EAAqC,gBAArC,CAAsD,OAAtD,EAA+D,aAA/D;AACD,GALD,CAKE,OAAO,CAAP,EAAU;AACV,IAAA,OAAO,CAAC,KAAR,CAAc,CAAd;AACD;AACF,CATD","file":"src.3c332d45.js","sourceRoot":"..\\src","sourcesContent":["export type Base64urlString = string;\n\nexport function base64urlToBuffer(baseurl64String: Base64urlString): ArrayBuffer {\n  // Base64url to Base64\n  const padding = \"==\".slice(0, (4 - (baseurl64String.length % 4)) % 4);\n  const base64String = baseurl64String.replace(/-/g, \"+\").replace(/_/g, \"/\") + padding;\n\n  // Base64 to binary string\n  const str = atob(base64String);\n\n  // Binary string to buffer\n  const buffer = new ArrayBuffer(str.length);\n  const byteView = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    byteView[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\nexport function bufferToBase64url(buffer: ArrayBuffer): Base64urlString {\n  // Buffer to binary string\n  const byteView = new Uint8Array(buffer);\n  let str = \"\";\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n\n  // Binary string to base64\n  const base64String = btoa(str);\n\n  // Base64 to base64url\n  // We assume that the base64url string is well-formed.\n  const base64urlString = base64String.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  return base64urlString;\n}\n","type SchemaLeaf = \"copy\" | \"convert\";\ninterface SchemaObject { [property: string]: { required: boolean; schema: Schema; }; }\ntype SchemaArray = [SchemaObject] | [SchemaLeaf];\n\nexport type Schema = SchemaLeaf | SchemaArray | SchemaObject;\n\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\nexport const copyValue = \"copy\";\nexport const convertValue = \"convert\";\n\nexport function convert<From, To>(conversionFn: (v: From) => To, schema: Schema, input: any): any {\n  if (schema === copyValue) {\n    return input;\n  }\n  if (schema === convertValue) {\n    return conversionFn(input);\n  }\n  if (schema instanceof Array) {\n    return input.map((v: any) => convert<From, To>(conversionFn, schema[0], v));\n  }\n  if (schema instanceof Object) {\n    const output: any = {};\n    for (const [key, schemaField] of Object.entries(schema)) {\n      if (!(key in input)) {\n        if (schemaField.required) {\n          throw new Error(`Missing key: ${key}`);\n        }\n        continue;\n      }\n      // Fields can be null (rather than missing or `undefined`), e.g. the\n      // `userHandle` field of the `AuthenticatorAssertionResponse`:\n      // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n      if (input[key] == null) {\n        output[key] = null;\n        continue;\n      }\n      output[key] = convert<From, To>(conversionFn, schemaField.schema, input[key]);\n    }\n    return output;\n  }\n}\n\nexport function required(schema: Schema): any {\n  return {\n    required: true,\n    schema,\n  };\n}\n\nexport function optional(schema: Schema): any {\n  return {\n    required: false,\n    schema,\n  };\n}\n","import { convertValue as convert, copyValue as copy, optional, required, Schema } from \"./schema-format\";\n\n// Shared by `create()` and `get()`.\n\nconst publicKeyCredentialDescriptorSchema: Schema = {\n  type: required(copy),\n  id: required(convert),\n  transports: optional(copy),\n};\n\nconst extensionsSchema: Schema = {\n  appid: optional(copy),\n  txAuthSimple: optional(copy),\n  txAuthGeneric: optional({\n    contentType: required(copy),\n    content: required(convert),\n  }),\n  authnSel: optional([convert]),\n  exts: optional(copy),\n  uvi: optional(copy),\n  loc: optional(copy),\n  uvm: optional(copy),\n  authenticatorBiometricPerfBounds: optional(copy),\n};\n\n// `navigator.create()` request\n\nexport const credentialCreationOptions: Schema = {\n  publicKey: required({\n    rp: required(copy),\n    user: required({\n      id: required(convert),\n      name: required(copy),\n      displayName: required(copy),\n      icon: optional(copy),\n    }),\n\n    challenge: required(convert),\n    pubKeyCredParams: required(copy),\n\n    timeout: optional(copy),\n    excludeCredentials: optional([publicKeyCredentialDescriptorSchema]),\n    authenticatorSelection: optional(copy),\n    attestation: optional(copy),\n    extensions: optional(extensionsSchema),\n  }),\n  signal: optional(copy),\n};\n\n// `navigator.create()` response\n\nexport const publicKeyCredentialWithAttestation: Schema = {\n  type: required(copy),\n  id: required(copy),\n  rawId: required(convert),\n  response: required({\n    clientDataJSON: required(convert),\n    attestationObject: required(convert),\n  }),\n};\n\n// `navigator.get()` request\n\nexport const credentialRequestOptions: Schema = {\n  mediation: optional(copy),\n  publicKey: required({\n    challenge: required(convert),\n    timeout: optional(copy),\n    rpId: optional(copy),\n    allowCredentials: optional([publicKeyCredentialDescriptorSchema]),\n    userVerification: optional(copy),\n    extensions: optional(extensionsSchema),\n  }),\n  signal: optional(copy),\n};\n\n// `navigator.get()` response\n\nexport const publicKeyCredentialWithAssertion: Schema = {\n  type: required(copy),\n  id: required(copy),\n  rawId: required(convert),\n  response: required({\n    clientDataJSON: required(convert),\n    authenticatorData: required(convert),\n    signature: required(convert),\n    userHandle: required(convert),\n  }),\n};\n\nexport const schema: { [s: string]: Schema } = {\n  credentialCreationOptions,\n  publicKeyCredentialWithAttestation,\n  credentialRequestOptions,\n  publicKeyCredentialWithAssertion,\n};\n","import { base64urlToBuffer, bufferToBase64url } from \"./base64url\";\nimport { CredentialCreationOptionsJSON, CredentialRequestOptionsJSON, PublicKeyCredentialWithAssertionJSON, PublicKeyCredentialWithAttestationJSON } from \"./json\";\nimport { convert } from \"./schema-format\";\nimport { credentialCreationOptions, credentialRequestOptions, publicKeyCredentialWithAssertion, publicKeyCredentialWithAttestation } from \"./webauthn-schema\";\n\nexport async function create(requestJSON: CredentialCreationOptionsJSON): Promise<PublicKeyCredentialWithAttestationJSON> {\n  const request = convert(base64urlToBuffer, credentialCreationOptions, requestJSON);\n  const credential = (await navigator.credentials.create(request)) as PublicKeyCredential;\n  const responseJSON = convert(bufferToBase64url, publicKeyCredentialWithAttestation, credential);\n  responseJSON.clientExtensionResults = credential.getClientExtensionResults();\n  return responseJSON;\n}\n\nexport async function get(requestJSON: CredentialRequestOptionsJSON): Promise<PublicKeyCredentialWithAssertionJSON> {\n  const request = convert(base64urlToBuffer, credentialRequestOptions, requestJSON);\n  const response = (await navigator.credentials.get(request)) as PublicKeyCredential;\n  const responseJSON = convert(bufferToBase64url, publicKeyCredentialWithAssertion, response);\n  responseJSON.clientExtensionResults = response.getClientExtensionResults();\n  return responseJSON;\n}\n\ndeclare global {\n  interface Window {\n    PublicKeyCredential: PublicKeyCredential | undefined;\n  }\n}\n\n// This function does a simple check to test for the credential management API\n// functions we need, and an indication of public key credential authentication\n// support.\n// https://developers.google.com/web/updates/2018/03/webauthn-credential-management\nexport function supported(): boolean {\n  return !!(navigator.credentials && navigator.credentials.create && navigator.credentials.get && window.PublicKeyCredential);\n}\n","import { PublicKeyCredentialWithAttestationJSON } from \"@github/webauthn-json\";\n\nexport function getRegistrations(): PublicKeyCredentialWithAttestationJSON[] {\n  const registrations = JSON.parse(localStorage.webauthnExampleRegistrations || \"[]\");\n  return registrations;\n}\n\nexport function setRegistrations(registrations: PublicKeyCredentialWithAttestationJSON[], display: boolean = true): void {\n  localStorage.webauthnExampleRegistrations = JSON.stringify(registrations, null, \"  \");\n  displayRegistrations();\n}\n\nexport function saveRegistration(registration: PublicKeyCredentialWithAttestationJSON): void {\n  const registrations = getRegistrations();\n  registrations.push(registration);\n  setRegistrations(registrations);\n}\n\nfunction registrationElem(): HTMLTextAreaElement {\n  return document.querySelector(\"#registrations\");\n}\n\nexport function displayRegistrations() {\n  registrationElem().value = JSON.stringify(getRegistrations(), null, \"  \");\n}\n\nexport function withStatus(selector: string, fn: () => Promise<void>) {\n  return async function () {\n    document.querySelector(\"#error\").textContent = \"\";\n    document.querySelector(selector).textContent = \"…\";\n    try {\n      await fn();\n      document.querySelector(selector).textContent = \" ✅\";\n    } catch (e) {\n      document.querySelector(selector).textContent = \" ❌\";\n      console.error(e);\n      document.querySelector(\"#error\").textContent = e;\n    }\n  }\n}\n\nasync function saveInput(): Promise<void> {\n  document.querySelector(\"#error\").textContent = \"\";\n  registrationElem().style.backgroundColor = \"rgba(255, 127, 0, 0.5)\";\n  try {\n    setRegistrations(JSON.parse(registrationElem().value), false);\n    registrationElem().style.backgroundColor = \"rgba(0, 255, 0, 0.5)\";\n  } catch (e) {\n    registrationElem().style.backgroundColor = \"rgba(255, 0, 0, 0.5)\";\n    console.error(e);\n    document.querySelector(\"#error\").textContent = e;\n  }\n}\n\nwindow.addEventListener(\"load\", function () {\n  try {\n    displayRegistrations();\n    registrationElem().addEventListener(\"keyup\", saveInput);\n    registrationElem().addEventListener(\"change\", saveInput);\n    registrationElem().addEventListener(\"paste\", saveInput);\n  } catch (e) {\n    console.error(e);\n  }\n});\n","// A minimal example to test `webauthn-json`.\n// Note: do not hardcode values in production.\n\nimport { create, get, supported } from \"@github/webauthn-json\"\nimport { saveRegistration, getRegistrations, setRegistrations, withStatus } from \"./state\";\nimport { PublicKeyCredentialDescriptorJSON } from \"@github/webauthn-json/dist/src/json\";\n\nfunction registeredCredentials(): PublicKeyCredentialDescriptorJSON[] {\n  return getRegistrations().map((reg) => ({\n    id: reg.rawId,\n    type: reg.type\n  }))\n}\n\nasync function register(): Promise<void> {\n  saveRegistration(await create({\n    publicKey: {\n      challenge: \"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\",\n      rp: { name: \"Localhost, Inc.\" },\n      user: { id: \"IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\", name: \"test_user\", displayName: \"Test User\" },\n      pubKeyCredParams: [{ type: \"public-key\", alg: -7 }],\n      excludeCredentials: registeredCredentials()\n    }\n  }));\n}\n\nasync function authenticate(): Promise<void> {\n  await get({\n    publicKey: {\n      challenge: \"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\",\n      allowCredentials: registeredCredentials()\n    }\n  });\n}\n\nasync function clear(): Promise<void> {\n  setRegistrations([]);\n}\n\nasync function testSupported() {\n  document.querySelector(\"#supported .status\").textContent = \"…\";\n  document.querySelector(\"#supported .status\").textContent = supported() ? \" ✅\" : \" ❌\";\n}\n\nwindow.addEventListener(\"load\", function () {\n  try {\n    document.querySelector(\"#register\").addEventListener(\"click\", withStatus(\"#register .status\", register));\n    document.querySelector(\"#authenticate\").addEventListener(\"click\", withStatus(\"#authenticate .status\", authenticate));\n    document.querySelector(\"#clear\").addEventListener(\"click\", withStatus(\"#clear .status\", clear));\n    document.querySelector(\"#supported\").addEventListener(\"click\", testSupported);\n  } catch (e) {\n    console.error(e);\n  }\n})\n"]}